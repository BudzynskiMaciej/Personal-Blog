[{"content":"Bardzo dawno tutaj nie pisałem, a moja aktywność opierała się o coroczne podbijanie znaku copyright. Z powodu aktualizacji Hugo, byłem zmuszony do odświeżenia strony i aktualizacji znajdujących się tu treści.\nZmiana template Aby zmienić template, wykonałem następujące kroki:\nUsunąłem stary template z moimi modyfikacjami hugo-dusk. Dodałem nowy template PaperMod do katalogu themes. Zmigrowałem plik config.toml na hugo.yaml. Konfiguracja Po zmianie template, musiałem dostosować konfigurację strony. Wprowadziłem następujące zmiany w pliku hugo.yaml:\nZaktualizowałem sekcję params o nowe ustawienia dostępne w template PaperMod. Dodałem nowe sekcje konfiguracyjne, które umożliwiają lepsze zarządzanie treścią i wyglądem strony. Artykuły w języku angielskim Kolejną nowością na stronie są artykuły w języku angielskim. Aby dodać wsparcie dla wielu języków, wprowadziłem następujące zmiany:\nDodałem sekcję languages w pliku hugo.yaml: languages: pl: languageName: \u0026#34;Polski\u0026#34; weight: 1 en: languageName: \u0026#34;English\u0026#34; weight: 2 Wszyskie artykuły zostały zduplikowane i zmieniono ich nazwy z *.md na *.en.md Artykuły te przetłumaczyłem z wykorzystaniem narzędzi AI. Dzięki tym zmianom, strona jest teraz dostępna zarówno dla polskojęzycznych, jak i anglojęzycznych użytkowników.\nMam nadzieję, że te zmiany przypadną Wam do gustu i ułatwią korzystanie ze strony, a ze swojej strony liczę na to, że uda się tu zamieścić więcej pulikacji.\n","permalink":"https://blog.budzynskimaciej.pl/post/site-update-and-changes/","summary":"\u003cp\u003eBardzo dawno tutaj nie pisałem, a moja aktywność opierała się o coroczne podbijanie\nznaku copyright. Z powodu aktualizacji Hugo, byłem zmuszony do odświeżenia strony i\naktualizacji znajdujących się tu treści.\u003c/p\u003e","title":"Odświeżenie i aktualizacja strony"},{"content":"O mnie Nazywam się Maciej Budzyński, jestem miłośnikiem technologi oraz absolwentem informatyki na Katolickim Uniwersytecie Lubelskim. Ukończyłem również technikum na kierunku informatycznym, posiadam dyplom technika informatyki (klasyfikacje E12, E13, E14).\nObecnie pracuję jako inżynier oprogramowania dla Ringier Axel Springer Tech. W pracy tej wykorzystuję technologie takie jak Python, C, JavaScript, Docker, AWS, Salt, MySQL oraz Couchbase. Do moich obowiazków należy utrzymanie oraz rozwój produktu Onet Poczta.\nWcześniej pracowałem jako kontraktor (programista Python) dla światowego lidera w dziedzinie farmacji i diagnostyki, a bezpośrednio dla Nexio Management jako programista Python. Na co dzień miełem styczność z wieloma bibliotekami oraz frameworkami Pythona takimi jak: FastAPI, SQLAlchemy, sphinx, pytest, poetry.\nWcześniej pracowałem dla Centralnego Ośrodka Informatyki jako Młodszy programista Java, rozwijając system Centralnej Ewidencji Pojazdów i Kierowców, Rejestr Dokumentów Paszportowych oraz Systemy Rejestrów Państwowych. W projektach tych wykorzystywałem takie technologie jak: Java7, Java8, Java11, SOAP, GraphQL, Apache Kafka, Docker, testy jednostkowe z użyciem Spocka (Groovy), testy integracyjne w Springu, Maven, Gradle, Jenkins, SonarQube, JIRA, system kontroli wersji GIT (z wykorzystaniem metodologii GitFlow).\nSwoją przygodę z programowaniem zaczełem w 4 klasie technikum informatycznego. Na początku miałem styczność z Pascalem oraz C++, który był też obecny na pierwszych latach moich studiów. Oprócz tego korzystałem również z Pythona oraz frameworka Django. Otarłem się również o GoLang (czego owocem jest ten blog oparty o Hugo, napędzanym właśnie przez Go).\nPosiadam konto na następujących portalach:\nGitHub BitBucket GitLab Facebook LinkedIn Twitter Mastodon StackOverflow Instagram TwitchTV Kontakt kontakt@budzynskimaciej.pl CV W celu otrzymania mojego CV proszę o kontakt mailowy na adres kontakt@budzynskimaciej.pl.\n","permalink":"https://blog.budzynskimaciej.pl/about/","summary":"\u003ch1 id=\"o-mnie\"\u003eO mnie\u003c/h1\u003e\n\u003cp\u003eNazywam się Maciej Budzyński, jestem miłośnikiem technologi oraz absolwentem\ninformatyki na Katolickim Uniwersytecie Lubelskim. Ukończyłem również\ntechnikum na kierunku informatycznym, posiadam dyplom technika informatyki\n(klasyfikacje E12, E13, E14).\u003c/p\u003e\n\u003cp\u003eObecnie pracuję jako inżynier oprogramowania dla\n\u003ca href=\"https://tech.ringieraxelspringer.com/\"\u003eRingier Axel Springer Tech\u003c/a\u003e.\nW pracy tej wykorzystuję technologie takie jak Python, C, JavaScript, Docker,\nAWS, Salt, MySQL oraz Couchbase. Do moich obowiazków należy utrzymanie oraz\nrozwój produktu \u003ca href=\"https://poczta.onet.pl/\"\u003eOnet Poczta\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWcześniej pracowałem jako kontraktor (programista Python) dla światowego\nlidera w dziedzinie farmacji i diagnostyki, a bezpośrednio dla\n\u003ca href=\"https://www.nexio.pl/\"\u003eNexio Management\u003c/a\u003e jako programista Python. Na co dzień\nmiełem styczność z wieloma bibliotekami oraz frameworkami Pythona takimi jak:\nFastAPI, SQLAlchemy, sphinx, pytest, poetry.\u003c/p\u003e","title":"O mnie"},{"content":"Nie posiadasz uprawnień administratora na lokalnym sprzęcie? Posiadasz Linuxa oraz Dockera? Jeżeli odpowiedź na powyższe pytania brzmi tak to w tym artykule pokażę Ci jak wykorzystać Dockera do modyfikacji pliku sudoers, dzięki czemu uzyskasz uprawnienia administratora.\nWymagania wstępne Przedstawiony tutaj sposób wymaga, aby użytkownik z ograniczeniami miał dostęp do komend dockerowych, tzn. użytkownik należy do grupy docker. Konfiguracja dockera wymaga, aby użytkownik należał do tej grupy. Sposób ten działa wyłącznie na systemie Linux (testowane na Ubuntu).\nTLDR Odpalenie alpine linuxa z zamontowaniem pliku /etc/sudoers jako sudoers w kontenerze: docker run -it -v /etc/sudoers:/sudoers --rm alpine /bin/sh\nZmiana uprawnień w celu edycji pliku sudoers za pomocą vi: chmod 777 sudoers vi sudoers\nDodanie użytkownikowi wymaganych uprawnień w pliku sudoers (klawisz i w celu dodania wpisu): # Pomiedzy user a ALL wymagana jest tabulacja (raz TAB, nie 4 spacje) user\tALL=(ALL:ALL) ALL\nWyjście z zapisem z vi: :wq\nPonowna zmiana uprawnień pliku sudoers na domyślne wartości oraz wyjście z konsoli kontenera: chmod 755 sudoers exit\nWeryfikacja zmian w pliku sudoers: cat /etc/sudoers sudo su\nOpis poszczególnych komend docker run -it -v /etc/sudoers:/sudoers \u0026ndash;rm alpine /bin/sh Komenda ta pozwala na pobranie obrazu alpine linuxa, a następnie odpalenie kontenera z tego obrazu. Parametr -it odpowiada za odpalenie trybu interaktywnego (pozostawia otwarty STDIN, nawet jeśli nie jest podłączony) oraz przydzielenie pseudo-TTY. Parametr -v wiążę katalog bądź plik hosta z wolumenem kontenera. W tym przypadku tworzymy powiązanie dla pliku hosta /etc/sudoers z plikiem sudoers w katalogu głównym naszego kontenera. Parametr --rm sprawia, że po zamknięciu i wyjściu z shella, utworzony kontener zostanie usunięty. Fragment alpine /bin/sh odpowiada za wybranie obrazu, z którego zostanie utworzony kontener (w tym przypadku linux alpine) oraz odpalenie polecenia (programu) /bin/sh, czyli powłoki systemu (shell).\nchmod 777 sudoers oraz vi sudoers Plik /etc/sudoers domyślnie jest zabezpieczony przed edycją. Ze względu, że alpine jest minimalistyczną dystrybucją linuxa posiada domyślnie edytor plików vi. Pliki sudoers powinny być edytowane za pomocą visudo, jednak w alpine nie ma domyślnie tego zainstalowane. W celu edycji pliku należy nadać pełne uprawnienia do pliku obecnemu użytkowniki za pomocą komendy chmod 777 sudoers odpalonej w kontenerze z alpine. Następnie można otworzyć plik sudoers wykorzystując edytor vi za pomocą komendy: vi sudoers. Aby móc wpisywać tekst w edytorze vi należy nacisnąć na klawiaturze przyciski i.\nuser\tALL=(ALL:ALL) ALL Powyższy wpis pozwala na dodanie użytkownikowi user uprawnień do wykonywania wszystkich komend. Pierwsze pole wskazuje nazwę użytkownika, którego dotyczy reguła (user). Pierwsze „ALL” oznacza, że ta reguła dotyczy wszystkich hostów. Drugie „ALL” oznacza, że użytkownik user może uruchamiać polecenia jako wszyscy użytkownicy. Trzecie „ALL” oznacza, że użytkownik user może uruchamiać polecenia jako wszystkie grupy. Czwarte „ALL” oznacza, że te zasady dotyczą wszystkich poleceń (komend). Należy pamiętać o zachowaniu odpowiedniego formatowania w pliku. W przypadku Ubuntu między user, a ALL był odstęp z wykorzystaniem pojedynczej tabulacji (nie cztery spacje). Osobiście nie jestem, pewien czy użycie pojedynczej spacji, bądź 4 spacji nie zepsuje niczego, więc dla pewności zachowałem docelowe formatowanie.\nWyjście z vi W celu wyjścia z edytora vi zapisując zmiany, należy nacisnąć na klawiaturze klawisz esc, a następnie wpisać :wq. Polecenia po dwukropku to komendy dla vi. w oznacza, iż chcemy zapisać zmiany wprowadzone w pliku natomiast q oznacza zamknięcie pliku.\nchmod 755 sudoers oraz exit Zmieniamy uprawnienia do pliku sudoers na domyślne wartości przed edycją, a następnie wychodzimy z powłoki kontenera za pomocą komendy exit. Po wyjściu kontener z alpine zostanie usunięty. Pozostanie wyłącznie pobrany obraz na dysku.\ncat /etc/sudoers oraz sudo su W celu weryfikacji dostępów możemy wykorzystać polecenie cat /etc/sudoers, aby sprawdzić, czy wpisy poprawnie się dodały. Możemy też użyć komendy sudo su, aby sprawdzić, czy możemy wykonywać polecenia jako sudo.\nWniosek Jak widać docker pozwala na zmianę uprawnień dla użytkownika i modyfikację plików, do których domyślnie nie posiadamy dostępu. Grupa Docker należy do grup administratorskich, przez co użytkownik będący w tej grupie posiadający dostęp do wykonywania komend dockera, ma możliwość dowolnej modyfikacji plików, bez konieczności dostępu do praw administratora.\n","permalink":"https://blog.budzynskimaciej.pl/post/docker-sudo-tricks/","summary":"\u003cp\u003eNie posiadasz uprawnień administratora na lokalnym sprzęcie? Posiadasz Linuxa oraz Dockera?\nJeżeli odpowiedź na powyższe pytania brzmi tak to w tym artykule pokażę Ci jak wykorzystać\nDockera do modyfikacji pliku sudoers, dzięki czemu uzyskasz uprawnienia administratora.\u003c/p\u003e","title":"Jak uzyskać dostęp do admina na Linuxie wykorzystując Dockera?"},{"content":"Projekty Większość moich publicznych projektów znajduje się na moim koncie na GitHub.\nStrona w Budowie ","permalink":"https://blog.budzynskimaciej.pl/projects/","summary":"\u003ch2 id=\"projekty\"\u003eProjekty\u003c/h2\u003e\n\u003cp\u003eWiększość moich publicznych projektów znajduje się na moim koncie na\n\u003ca href=\"https://github.com/BudzynskiMaciej\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"strona-w-budowiehttpsgithubcombudzynskimaciej\"\u003e\u003ca href=\"https://github.com/BudzynskiMaciej\"\u003eStrona w Budowie\u003c/a\u003e\u003c/h3\u003e","title":"Projekty"},{"content":"Blockchain (po polsku łańcuch bloków) jest ostatnio popularnym słowem w odmętach internetu. W tym artykule postaram się zdemaskować czym jest sławny Blockchain oraz do czego może być przydatny.\nStruktury danych Na początku należy wytłumaczyć, czym są struktury danych, aby móc zrozumieć czym jest blockchain. Struktury danych (ang. data structures) w ogólnym skrócie są sposobem organizacji, zarządzania oraz przechowywania danych w pamięci komputera. Dokładniej, struktura danych to zbiór wartości danych, relacje między nimi oraz funkcje, bądź operacje, które można zastosować dla danych. Różne struktury danych służą do różnych celów jak na przykład relacyjne bazy danych, które wykorzystują indeksy drzewa-B do pobierania danych oraz pewne implementacje kompilatorów używają tabel mieszających (ang. Hash Table) do wyszukiwania identyfikatorów. Do struktur danych zaliczamy:\nRekord, zwaną też strukturą, bądź krotką (np. punkt o współrzędnych X, Y) Tablicę Lista (jedno bądź dwukierunkowa) Objekt Drzewo Tablica mieszająca Graf oraz wiele, wiele więcej różnych wariancji powyższych struktur danych.\nBlockchain Blockchain to struktura danych. Konkretnie jest to rodzaj jednokierunkowej listy zawierających silnie powiązane ze sobą bloki za pomocą kryptografii. Każdy blok zawiera hasz poprzedniego bloku, znacznik czasu oraz dane transakcji. Wyjątkiem jest tak zwany Genesis Block (pol. blok początkowy). Jest to pierwszy blok tworzący łańcuch powiązań z innymi blokami. Założeniem łańcucha bloków jest odporność na modyfikację danych oraz łatwa weryfikacja, czy dane nie zostały podrobione. Modyfikacja dowolnego bloku, skutkuje wygenerowaniem zupełnie innych haszy dla kolejnych bloków, co pozwala na łatwą weryfikację czy dane nie zostały podrobione.\nA po co to i na co to komu? Obecnie zastosowanie blockchain to przedewszystkim obsługa różnych transakcji jak na przykład:\nAkcje Waluty Handel Główne zastosowanie tej struktury danych można zauważyć w kryptowalutach np. Bitcoin. W następnych artykułach postaram się zaimplementować przykładowy łańcuch bloków.\n","permalink":"https://blog.budzynskimaciej.pl/post/blockchain-p1/","summary":"\u003cp\u003eBlockchain (po polsku łańcuch bloków) jest ostatnio popularnym słowem w odmętach internetu.\nW tym artykule postaram się zdemaskować czym jest sławny Blockchain oraz do czego może\nbyć przydatny.\u003c/p\u003e","title":"Czym jest Blockchain?"},{"content":"Dawno tu nie pisałem, jednak warto trochę odświeżyć tego bloga. Dzisiejszy wpis będzie krótki, a we wpisie zamierzam przedstawić intergrację Hugo z platformą Forestry.io\nCzym jest Forestry.io? Najprościej mówiąc Forestry.io jest wizualnym edytorem naszej strony. Dzięki Forestry.io dodawana jest możliwoć publikowania oraz edytowania stron za pomocą przeglądarki internetowej.\nIntegracja Integracja Hugo z Forestry.io jest prosta. Wystraczy zalogować się na https://app.forestry.io/ za pomocą naszego konta Github i po kolei wypełniać dane o które poprosi nas strona. Po integracji wystarczy zalogować się, przejść na zakładkę z postami i dodawać je, bądź edytować za pomocą wizualnego edytora Markdown. I to w sumie wszystko na dzisiaj.\nTen wpis został dodany za pomocą https://app.forestry.io/\n","permalink":"https://blog.budzynskimaciej.pl/post/forestry-and-hugo/","summary":"\u003cp\u003eDawno tu nie pisałem, jednak warto trochę odświeżyć tego bloga. Dzisiejszy wpis będzie krótki, a we wpisie zamierzam przedstawić intergrację Hugo z platformą Forestry.io\u003c/p\u003e","title":"Forestry i Hugo"},{"content":"W pythonie istniały dwie metody formatowania stringów. Sytuacja ta trwała do czasu pojawienia się Python 3.6, wraz z nadejściem f-stringów. Dziś postaram się omówić wszystkie metody formatowania, oraz podam przykład ich stosowania.\nKod z którym będziemy pracować Wykorzystamy pare prostych zmiennych, które postaram się wyświetlić za pomocą każdej z dostępnych metod formatujących.\nfirst_name = \u0026#34;John\u0026#34; last_name = \u0026#34;Doe\u0026#34; born_year = 1978 current_age = 40 dict = {\u0026#39;text\u0026#39;:\u0026#39;One\u0026#39;, \u0026#39;value\u0026#39;: 1} Stare formatowanie poprzez znak \u0026lsquo;%\u0026rsquo; Formatowanie to znajduje się w Pythonie od dawien dawna. Obecnie metoda ta nie jest zalecana przez dokumentację Pythona, gdyż posiada pewne niedociągłości i może powodować problemy z wyświetlaniem krotek oraz list. Poniżej przedstawiam przykład użycia tego formatowania:\nprint(\u0026#34;Hello %s %s. Your born year is %d. You are %d years old\u0026#34;, first_name, last_name, born_year, current_age) Co oznacza %s? To porostu informuje interpreter o tym, że chcemy odczytać string. Dostępne modyfikatory:\n%s - Ciąg znaków (bądź każdy obiekt który posiada metodę repr np. tablica)) %d - Liczby całkowite %f - Liczby zmiennoprzecinkowe %.(X) - Liczba zmiennoprzecinkowa z dokładnością do X liczb po przecinku %X - Liczba całkowita reprezentowana w zapisie hexadecymalnym (szesnastkowym) Formatowanie poprzez str.format() Ta opcja została wprowadzona w Python 2.6. Jest to ulepszone formatowanie względem %-formatowania. Dzięki str.format() pola które zamierzamy podstawić reprezentujemy za pomocą znaków {}. Przykład:\nprint(\u0026#34;Hello {2} {3}. Your born year is {1}. You are {0} years old.\u0026#34;.format(current_age, born_year, first_name, last_name)) Możemy też wyświetlać zawartość słowników poprzez ich rozpakowywanie:\nprint(\u0026#34;{text} is {value}.\u0026#34;.format(**dict)) Nowa droga, czyli f-Stringi w Pythonie 3.6 Wprowadzenie f-Stringów uczyniło formatowanie jeszcze prostrzym. Przykład:\nprint(f\u0026#34;Hello {first_name} {last_name}. Your born year is {born_year}. You are {current_year} years old\u0026#34;) To wszystko, f-Stringi są wykonywane w czasie uruchomienia. Poprostu w {} podajesz zmienną zdefiniowaną wcześniej. Możesz też używać wyrażeń, np.:\nprint(f\u0026#34;{2 * 6}\u0026#34;) Ten kod wyświetli wartość wyrażenia 2 * 6, czyli 12. Możesz też wywoływać funkcje:\nname = \u0026#34;jane\u0026#34; print(f\u0026#34;{name.capitalize()}\u0026#34;) Powyższy kod wyświetli napis: Jane. Możemy też wyświetlać zawartość słowników:\nprint(f\u0026#34;{dict[\u0026#39;text\u0026#39;]} is {dict[\u0026#39;value\u0026#39;]}.\u0026#34;) Jak widać warto korzystać z f-Stringów, gdyż zwiększają naszą produktywność oraz nie zaciemniają kodu. Również są też nieco szybsze w wykonaniu niż %-Stringi oraz str.format().\n","permalink":"https://blog.budzynskimaciej.pl/post/string-in-python/","summary":"\u003cp\u003eW pythonie istniały dwie metody formatowania stringów. Sytuacja ta trwała do czasu pojawienia się\nPython 3.6, wraz z nadejściem f-stringów. Dziś postaram się omówić wszystkie metody formatowania,\noraz podam przykład ich stosowania.\u003c/p\u003e","title":"Upiększanie ciągów znaków, czyli jak formatować stringi w Pythonie"},{"content":"W aktualnych czasach każdy posiada swoją stronę w internecie. Ja postanowiłem założyć bloga opartego o technologię Hugo.\nPoczątki blogowania Swoją przygodę rozpocząłem z blogiem stworzonym za pomocą Wordpressa. Możliwości konfiguracji, ilość szablonów, dodatków to wszystko przytłaczało. Wordpress był bardzo prostm narzędziem, jednak miał też kilka wad, wymagał PHP oraz Bazy Danych, a wraz z rozrostem strony zwiększał się jej czas ładowania. W dodatku darmowy hosting nie mógł utrzymać dużego ruchu na stronach.\nGeneratory stron statycznych Wtedy zaznajomiłem się z narzędziami do generowania stron statycznych. Rozpocząłem od wykorzystania najpopularniejszego z nich Jekylla. I tu pojawiły się pierwsze problemy. Jako użytkownik Windowsa zacząłem mieć problemy z konfiguracją i instalacją Ruby. Problemy z certyfikatami, problemy z bundlerem, z aktualizacją dodatków jak i samego Jekylla. Mimo, iż Jekyll to potężne narzędzie pozwalające instalować dodatki i dowolnie modyfikować wygląd strony, jednak Ruby + Windows = Męczarnia.\nHugo, generator stron statycznych oparty o GoLang Postanowiłem poszukać alternatywy do Jekylla i w ten sposób natrafiłem na Hugo, a właściwie goHugo (wpisanie samej frazy Hugo może wiązać się ze znalezieniem znanego z interaktywnego programu telewizyjnego dla dzieci trolem imieniem Hugo) Hugo jest podobnie jak Jekyl generatorem stron statycznych, jednak napisanym w kompilowanym języku GoLang. Nie musimy znać się absolutnie na Go by móc korzystać z Hugo. Jedyna wiedza jakiej potrzebujemy to ta związana z HTML i CSS jeśli chcemy edytować, bądź tworzyć własne szablony oraz Markdown do pisania naszych postów.\nZalety Wady Proste tworzenie postów z wykorzystaniem Markdown Wymaga znajomości GIT, jeśli zamierzamy korzystać z GitHub Pages Łatwe zarządzanie wyglądem dzięki HTML i CSS Dodawanie specjalnych funkcji może wymagać znajomości Go Prosta i jednocześnie obszerna dokumentacja Na większości hostingów wymagane jest wrzucanie całego folderu Public Rozpoczęcie przygody z Hugo Aby rozpocząć przygodę z Hugo należy pobrać jego najnowszą wersję z repozytorium na GitHub. Stamtąd pobieramy najnowszą wersję w zależności od posiadanego systemu operacyjnego: W moim przypadku na dzień pisania newsa jest to wersja hugo_0.40.1_Windows-64bit.zip Na Windows wystarczy wypakować plik hugo.exe w dowolnym miejscu: Polecam C:/Hugo/ Po czym musimy dodać katalog zawierający wyżej wymieniony plik do zmiennej środowiskowej PATH. Jeśli wszystko zrobiliśmy poprawnie powinna zadziałać komenda hugo help. w przypadku problemów odsyłam was do oficjalnej dokumentacji Hugo związaną z jego instalacją na systemie Windows w języku angielskim.\nNa koniec zostawiam film związany z szybką instalacją i aktywacją naszego pierwszego bloga w Hugo ","permalink":"https://blog.budzynskimaciej.pl/post/blog/","summary":"\u003cp\u003eW aktualnych czasach każdy posiada swoją stronę w internecie. Ja postanowiłem założyć bloga\nopartego o technologię Hugo.\u003c/p\u003e","title":"Blog oparty o generator stron statycznych Hugo"},{"content":"Zastanawiasz sie nad wyborem języka programowania? Nie masz pojęcia który z nich wybrać? W takim razie ten post jest dla Ciebie. Przygotowałem w nim krótkie opisy różnych języków programowania oraz podstawowy kod programu Hello World.\nGolang package main import \u0026#34;fmt\u0026#34; func main(){ fmt.Printf(\u0026#34;Hello World\\n\u0026#34;) } Statycznie typowany, wieloparadygmatowy język programowania opracowany przez pracowników Google Roberta Griesemera, Roba Pike\u0026rsquo;a oraz Kena Thompsona w 2009 roku. Posiada wbudowany Kolektor Śmieci (ang. Garbage Collector). Znacząco ułatwia programowanie współbierzne, dzięki tak zwanym GoRutines. Funkcje mogą zwracać więcej niż jeden wynik. Niestety na chwilę obecną Go 1.10 nie wspiera typów generycznych.\nJavaScript console.log(\u0026#34;Hello World\u0026#34;); Język frontendu. Wymagany podczas pisania aplikacji internetowych. Służy do tworzenia interaktywnych widoków na stronach WWW. Typowany dynamicznie (kacze typowanie), wieloparadygmatowy, oparty na prototypach język programowania opracowany przez firmę Netscape w 1995 roku. Dzięki swojej serwerowej implementacji NodeJS posiada ogromną bibliotekę frameworków między innymi Angular od Google oraz React od Facebooka.\nJava class Hello{ public static void main(){ System.out.println(\u0026#34;Hello World\u0026#34;); } } Język w pełni obiektowy, typowany statycznie. Obecnie jest to jeden z najpopularniejszych języków programowania w którym można znaleźć pracę bez większych problemów. Stworzony w 1995 przez Sun Microsystems. Jego główne zastosowanie to aplikacje webowe klasy enterprise. Często wykorzystuje się przy nim Spring Framework do tworzenia aplikacji. Java powstała z myślą niezależności od architektury, dzięki czemu możemy uruchomić ją na każdej maszynie posiadającą wirtualną maszynę Javy.\nC# class HelloWorld { static void Main() { System.Console.WriteLine(\u0026#34;Hello, World!\u0026#34;); } } Odpowiedź Microsoftu na Javę. Również stworzony jako w pełni obiektowy, statycznie typowany język programowamnia. Posiada wiele elementów języka C++ oraz Javy. Wirtualna maszyna .NET pozwala na uruchomienie na wielu systemach, głównie za sprawą .NET Core\nC #include \u0026lt;stdio.h\u0026gt; main() { printf(\u0026#34;Hello World!\\n\u0026#34;); } Jeden z najstarszych języków, obecnie wykorzystywany przy pisaniu mikrokontrolerów. Obecnie też stosuje się go przy rozwoju jądra Linux. Nie posiada klas, jednak jest niewielkich rozmiarów i potrafi się kompilować na każdej platformie. Jest to język statycznie typowany.\nC++ #include \u0026lt;iostream.h\u0026gt; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; } Ulepszone C, posiada klasy, szablony(typy generyczne), mechanizmy dziedziczenia. Ogółem rzecz biorąc jest to C na sterydach. Wykorzystywany tam, gdzie liczy się, szybkość naszych aplikacji.\nPython print(\u0026#34;Hello World\u0026#34;) Język dynamicznie typowany, interpretowany. Bardzo prosty do nauczenia, znajduje wykorzystanie w wielu dziedzinach informatyki, od prostych skyptów, poprzez strony internetowe (z wykorzystaniem frameworków Django lub Flask), aż do Sztucznej Inteligencji (Machine Learning, Deep Learning). Dzięki dynamicznemu typowaniu możemy nie przejmować się precyzowaniem typu danych, niestety ponieważ jest to język interpretowany nie zdołamy wykryć błedów przed uruchomieniem aplikacji, oraz wydajność naszych aplikacji nie będzie tak dobra jak w przypadku apliacji pisanych w C bądź C++ (chodź wszystko zależy od zastosowanego algorytmu).\nRuby puts \u0026#39;Hello, world!\u0026#39; Podobnie jak Python jest to język dynamicznie typowany oraz interpretowany. Obecnie jego główne zastosowanie to WebDev dzięki frameworkowi Ruby on Rails, który pozwala na szybkie prototypowanie i pisanie aplikacji internetowych. Sam Ruby on Rails posiada mechanizm rusztowania naszych aplikacji (Scaffolding), dzięki czemu prostą stronę z wykorzystaniem baz danych, widoków oraz kontrolerów stworzymy w kilka minut.\nPHP \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; Język przez wielu uważany za wymierający, przeznaczony wyłącznie do WebDev. Mimo wszystko wciąż jest bardzo popularny dzięki CMSowi zwanemu Wordpress, który został napisany właśnie w PHP. Sam Wordpress nie wymaga znajomości PHP, jednak pisanie dodatków może już wymagać od nas znajomości PHP.\nHaskell main = putStrLn \u0026#34;Hello World\u0026#34; Język z paradygmatem programowania funkcyjnego. Idealny do nauki własnie takiego stylu programowania. Nie było mi dane z niego korzystać, więc wiele na jego temat nie napiszę.\nMalbolge (=\u0026lt;`$9]7\u0026lt;5YXz7wT.3,+O/o\u0026#39;K%$H\u0026#34;\u0026#39;~D|#z@b=`{^Lx8%$Xmrkpohm-kNi;gsedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?\u0026gt;=\u0026lt;;:9876543s+O\u0026lt;oLm","permalink":"https://blog.budzynskimaciej.pl/post/helloworld/","summary":"\u003cp\u003eZastanawiasz sie nad wyborem języka programowania? Nie masz pojęcia który z nich wybrać?\nW takim razie ten post jest dla Ciebie. Przygotowałem w nim krótkie opisy różnych języków\nprogramowania oraz podstawowy kod programu Hello World.\u003c/p\u003e","title":"Jaki język programowania wybrać na początek, czyli multi-Hello World"}]