[{"content":"Artificial Intelligence (AI) has become one of the most transformative technologies of our time. From chatbots to autonomous vehicles, AI is reshaping industries and our daily lives. In this article, I will explain what AI is, how Large Language Models (LLMs) work, and how you can run AI models locally using tools like Ollama and LM Studio.\nWhat is Artificial Intelligence? Artificial Intelligence (AI) refers to computer systems capable of performing tasks that typically require human intelligence. These tasks include understanding natural language, recognizing images, making decisions, and even generating creative content. AI is broadly categorized into:\nNarrow AI – Specialized AI designed for specific tasks, like voice assistants (Siri, Alexa) or recommendation systems. General AI – A hypothetical AI that can perform any intellectual task a human can do. Superintelligent AI – A concept where AI surpasses human intelligence in all aspects. What are Large Language Models (LLMs)? Large Language Models (LLMs) are a subset of AI designed to understand and generate human-like text. These models are trained on vast amounts of text data and use deep learning techniques to predict and generate coherent responses. Popular LLMs include:\nGPT (Generative Pre-trained Transformer) – Developed by OpenAI. LLaMA (Large Language Model Meta AI) – Open-source model by Meta. Mistral \u0026amp; Mixtral – Advanced LLMs focused on efficiency and performance. How LLMs Work LLMs operate using deep learning models based on neural networks, specifically transformer architectures. The key components of an LLM include:\nTokenization – Breaking text into smaller units (tokens) for processing. Training on Large Datasets – Learning from billions of words. Fine-tuning – Adjusting the model for specific tasks like code generation or translation. Applications of LLMs Large Language Models have a wide range of applications, including:\nConversational AI – Used in chatbots like ChatGPT, customer support agents, and virtual assistants. Content Generation – Writing blog articles, generating reports, or even creating poetry and fiction. Code Assistance – AI-powered coding assistants like GitHub Copilot help developers by generating code snippets and completing functions. Translation Services – Automating language translation with tools like DeepL and Google Translate. Medical Research – Assisting in diagnosing conditions, summarizing medical papers, and generating clinical notes. Search and Information Retrieval – Enhancing search engines with AI-powered summarization and contextual understanding. Challenges and Limitations Despite their capabilities, LLMs also have challenges and limitations:\nBias in Training Data – Since they learn from vast text sources, they can inherit biases present in those datasets. Computational Requirements – Running large-scale models requires significant processing power, especially for real-time applications. Lack of True Understanding – While LLMs generate text based on patterns, they do not possess genuine comprehension or reasoning abilities. Ethical Concerns – Misuse of AI-generated content for misinformation, deepfakes, or plagiarism. As research continues, improvements in AI safety, efficiency, and ethical guidelines will shape the future of LLM applications.\nRunning AI Models Locally While most AI applications rely on cloud-based models, running AI models locally offers several benefits:\nPrivacy – Your data stays on your machine. Speed – No dependency on internet connectivity. Customization – Ability to fine-tune models for specific use cases. Installing and Using Local AI Tools 1. Ollama Ollama is a tool for running LLMs on your local machine with minimal setup.\nInstallation Windows, Mac \u0026amp; Linux:\nDownload the executable from ollama.ai and install it. Follow the on-screen instructions to complete the installation. Running a Model ollama run mistral This command downloads and runs the Mistral model locally. Ollama allows you to load and run different LLMs efficiently while leveraging your hardware.\nFeatures of Ollama Lightweight Execution – Optimized to run models efficiently. Multiple Model Support – Load different LLMs as needed. Ease of Use – Simple command-line interface for quick access. 2. LM Studio LM Studio provides a GUI for running local AI models with ease.\nInstallation Download LM Studio from lmstudio.ai and install it. Using LM Studio Open the application. Download a compatible model (e.g., LLaMA 2, Mistral). Interact with the model via the built-in chat interface. Features of LM Studio User-Friendly Interface – No need for command-line interactions. Model Management – Easily download and switch between different AI models. Performance Optimization – Ensures smooth operation on various hardware configurations. DeepSeek R1: A Powerful Open-Source LLM What is DeepSeek R1? DeepSeek R1 is an open-source large language model (LLM) developed by the Chinese AI company DeepSeek. Designed to excel in complex reasoning tasks, including mathematics, coding, and logical problem-solving, it achieves performance comparable to leading models like OpenAI\u0026rsquo;s GPT-4. Notably, DeepSeek R1 was developed with significantly fewer resources, utilizing only about 2,000 GPUs and incurring a cost of approximately $5.6 million, which is a fraction of the expenditure for similar models.\nPerformance In benchmark evaluations, DeepSeek R1 has demonstrated strong performance across various domains:\nMathematics: Achieved a 79.8% Pass@1 score on the AIME 2024 benchmark. Coding: Performed competitively in code-related tasks, with a 49.2% score on the SWE-bench Verified benchmark, slightly surpassing OpenAI\u0026rsquo;s GPT-4. Reasoning: Demonstrated effective logical reasoning capabilities, making it suitable for complex problem-solving applications. Running DeepSeek R1 Locally with Ollama Step 1: Download and Run DeepSeek R1 Open your terminal or command prompt and execute the following command to download and run the DeepSeek R1 model:\nollama run deepseek-r1 This command will download the DeepSeek R1 model and run it locally on your machine.\nStep 2: Running DeepSeek R1 in the Background To keep DeepSeek R1 running continuously and accessible via an API, start the Ollama server:\nollama serve This will make the model available for integration with other applications.\nHardware Considerations DeepSeek R1 offers various model sizes, ranging from 1.5 billion to 671 billion parameters. The 671B model is the original DeepSeek R1, while the smaller versions are distilled models based on Qwen and Llama architectures. If your hardware cannot support the full 671B model, you can run a smaller version by specifying the desired model size in the command. Replace X with the parameter size you want to use (e.g., 1.5b, 7b, 8b, 14b, 32b, 70b):\nollama run deepseek-r1:Xb This flexibility allows you to utilize DeepSeek R1\u0026rsquo;s capabilities even on hardware with limited resources.\nAccessing DeepSeek R1 via API Once the Ollama server is running, you can interact with DeepSeek R1 through an API. For example, using curl:\ncurl http://localhost:11434/api/chat -d \u0026#39;{ \u0026#34;model\u0026#34;: \u0026#34;deepseek-r1\u0026#34;, \u0026#34;messages\u0026#34;: [{ \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Solve: 25 * 25\u0026#34; }], \u0026#34;stream\u0026#34;: false }\u0026#39; This command sends a request to the model to solve the multiplication problem.\nUsing DeepSeek R1 in Python To integrate DeepSeek R1 into Python applications, install the Ollama Python package:\npip install ollama Then, use the following script to interact with the model:\nimport ollama response = ollama.chat( model=\u0026#34;deepseek-r1\u0026#34;, messages=[ {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Explain Newton\u0026#39;s second law of motion\u0026#34;}, ], ) print(response[\u0026#34;message\u0026#34;][\u0026#34;content\u0026#34;]) This script sends a prompt to DeepSeek R1 and prints the model\u0026rsquo;s response.\nConsiderations While DeepSeek R1 offers advanced capabilities, it\u0026rsquo;s important to be aware of certain considerations:\nContent Moderation: Reports indicate that DeepSeek R1 may provide information that is potentially harmful or sensitive, such as details on modifying bird flu viruses or promoting self-harm. This raises concerns about the model\u0026rsquo;s safety and the effectiveness of its content moderation mechanisms. Data Privacy: As with any AI model, it\u0026rsquo;s crucial to handle data responsibly and be mindful of privacy implications, especially when deploying the model in applications that process sensitive information. Conclusion AI and LLMs are revolutionizing technology, and now you can run powerful AI models locally on your machine. Whether you prefer the command-line simplicity of Ollama or the user-friendly interface of LM Studio, local AI tools are becoming more accessible than ever. Experiment, explore, and harness the power of AI on your own terms!\nRunning AI models locally is an exciting opportunity for developers, researchers, and enthusiasts alike. It enables deeper control, improved privacy, and efficient experimentation without relying on cloud-based services. With advancements in hardware acceleration, running large-scale models on consumer machines is becoming more practical.\nDeepSeek R1 is a powerful and cost-effective alternative to leading proprietary LLMs, making it an attractive choice for researchers, developers, and AI enthusiasts. By running it locally with Ollama, users can take advantage of its advanced reasoning capabilities while maintaining control over their AI infrastructure. Whether for coding, mathematics, or general problem-solving, DeepSeek R1 is a promising open-source solution for AI-driven applications.\nArticle generated using artificial intelligence.\n","permalink":"https://blog.budzynskimaciej.pl/en/post/ai-and-llms/","summary":"\u003cp\u003eArtificial Intelligence (AI) has become one of the most transformative technologies of our time. From chatbots to autonomous vehicles, AI is reshaping industries and our daily lives. In this article, I will explain what AI is, how Large Language Models (LLMs) work, and how you can run AI models locally using tools like Ollama and LM Studio.\u003c/p\u003e\n\u003ch1 id=\"what-is-artificial-intelligence\"\u003eWhat is Artificial Intelligence?\u003c/h1\u003e\n\u003cp\u003eArtificial Intelligence (AI) refers to computer systems capable of performing tasks that typically require human intelligence. These tasks include understanding natural language, recognizing images, making decisions, and even generating creative content. AI is broadly categorized into:\u003c/p\u003e","title":"AI, LocalLLM and DeepSeek. What is it all about and how to dive into the world of LLM?"},{"content":"I haven\u0026rsquo;t written here for a very long time, and my activity was limited to the annual update of the copyright notice. Due to the Hugo update, I was forced to refresh the site and update the content here.\nTemplate Change To change the template, I performed the following steps:\nRemoved the old template with my modifications hugo-dusk. Added the new template PaperMod to the themes directory. Migrated the config.toml file to hugo.yaml. Configuration After changing the template, I had to adjust the site configuration. I made the following changes in the hugo.yaml file:\nUpdated the params section with new settings available in the PaperMod template. Added new configuration sections that allow better content and site appearance management. Articles in English Another new feature on the site is articles in English. To add support for multiple languages, I made the following changes:\nAdded the languages section in the hugo.yaml file: languages: pl: languageName: \u0026#34;Polski\u0026#34; weight: 1 en: languageName: \u0026#34;English\u0026#34; weight: 2 All articles were duplicated and their names changed from *.md to *.en.md These articles were translated using AI tools. Thanks to these changes, the site is now available for both Polish and English-speaking users.\nI hope you will like these changes and that they will make it easier to use the site, and I hope to publish more content here.\n","permalink":"https://blog.budzynskimaciej.pl/en/post/site-update-and-changes/","summary":"\u003cp\u003eI haven\u0026rsquo;t written here for a very long time, and my activity was limited to the annual update of the copyright notice. Due to the Hugo update, I was forced to refresh the site and update the content here.\u003c/p\u003e","title":"Site Refresh and Update"},{"content":"About My name is Maciej Budzyński, I am a technology enthusiast and a graduate of computer science at the Catholic University of Lublin. I also graduated from a technical school in the field of computer science, and I hold a diploma as a computer technician (qualifications E12, E13, E14).\nI currently work as a software engineer for Ringier Axel Springer Tech. In this job, I use technologies such as Python, C, JavaScript, Docker, AWS, Salt, MySQL, and Couchbase. My responsibilities include maintaining and developing the Onet Poczta product.\nPreviously, I worked as a contractor (Python developer) for a global leader in the field of pharmacy and diagnostics, directly for Nexio Management as a Python developer. On a daily basis, I dealt with many Python libraries and frameworks such as: FastAPI, SQLAlchemy, sphinx, pytest, poetry.\nBefore that, I worked for the Central Information Technology Center as a Junior Java Developer, developing the Central Vehicle and Driver Register, Passport Document Register, and State Registers Systems. In these projects, I used technologies such as: Java7, Java8, Java11, SOAP, GraphQL, Apache Kafka, Docker, unit tests with Spock (Groovy), integration tests in Spring, Maven, Gradle, Jenkins, SonarQube, JIRA, version control system GIT (using the GitFlow methodology).\nI started my programming adventure in the 4th grade of technical school. At first, I dealt with Pascal and C++, which were also present in the early years of my studies. In addition, I also used Python and the Django framework. I also dabbled in GoLang (which resulted in this blog based on Hugo, powered by Go).\nI have accounts on the following portals:\nGitHub BitBucket GitLab Facebook LinkedIn Twitter Mastodon StackOverflow Instagram TwitchTV Contact kontakt@budzynskimaciej.pl CV To receive my CV, please contact me via email at kontakt@budzynskimaciej.pl.\n","permalink":"https://blog.budzynskimaciej.pl/en/about/","summary":"\u003ch1 id=\"about\"\u003eAbout\u003c/h1\u003e\n\u003cp\u003eMy name is Maciej Budzyński, I am a technology enthusiast and a graduate of\ncomputer science at the Catholic University of Lublin. I also graduated from\na technical school in the field of computer science, and I hold a diploma as\na computer technician (qualifications E12, E13, E14).\u003c/p\u003e\n\u003cp\u003eI currently work as a software engineer for\n\u003ca href=\"https://tech.ringieraxelspringer.com/\"\u003eRingier Axel Springer Tech\u003c/a\u003e.\nIn this job, I use technologies such as Python, C, JavaScript, Docker,\nAWS, Salt, MySQL, and Couchbase. My responsibilities include maintaining and\ndeveloping the \u003ca href=\"https://poczta.onet.pl/\"\u003eOnet Poczta\u003c/a\u003e product.\u003c/p\u003e","title":"About"},{"content":"Do you not have administrator privileges on your local machine? Do you have Linux and Docker? If the answer to the above questions is yes, then in this article I will show you how to use Docker to modify the sudoers file, allowing you to gain administrator privileges.\nPrerequisites The method presented here requires that the restricted user has access to docker commands, i.e., the user belongs to the docker group. Docker configuration requires the user to belong to this group. This method works only on Linux systems (tested on Ubuntu).\nTLDR Running alpine linux with the /etc/sudoers file mounted as sudoers in the container: docker run -it -v /etc/sudoers:/sudoers --rm alpine /bin/sh\nChanging permissions to edit the sudoers file using vi: chmod 777 sudoers vi sudoers\nAdding the required permissions to the user in the sudoers file (press i to add an entry): # A tab is required between user and ALL (one TAB, not 4 spaces) user\tALL=(ALL:ALL) ALL\nExiting vi with saving: :wq\nChanging the permissions of the sudoers file back to default values and exiting the container shell: chmod 755 sudoers exit\nVerifying changes in the sudoers file: cat /etc/sudoers sudo su\nDescription of individual commands docker run -it -v /etc/sudoers:/sudoers \u0026ndash;rm alpine /bin/sh This command allows you to download the alpine linux image and then run a container from that image. The -it parameter is responsible for running interactive mode (keeps STDIN open even if not attached) and assigning a pseudo-TTY. The -v parameter binds the host\u0026rsquo;s directory or file to the container\u0026rsquo;s volume. In this case, we create a binding for the host file /etc/sudoers with the sudoers file in the root directory of our container. The --rm parameter ensures that after closing and exiting the shell, the created container will be removed. The alpine /bin/sh fragment is responsible for selecting the image from which the container will be created (in this case, alpine linux) and running the command (program) /bin/sh, which is the system shell.\nchmod 777 sudoers and vi sudoers The /etc/sudoers file is protected from editing by default. Since alpine is a minimalist linux distribution, it has the vi file editor by default. The sudoers files should be edited using visudo, but alpine does not have this installed by default. To edit the file, you need to grant full permissions to the file for the current user using the chmod 777 sudoers command run in the alpine container. Then you can open the sudoers file using the vi editor with the command: vi sudoers. To be able to enter text in the vi editor, press the i key on the keyboard.\nuser\tALL=(ALL:ALL) ALL The above entry allows the user to have permissions to execute all commands. The first field indicates the username to which the rule applies (user). The first \u0026ldquo;ALL\u0026rdquo; means that this rule applies to all hosts. The second \u0026ldquo;ALL\u0026rdquo; means that the user can run commands as all users. The third \u0026ldquo;ALL\u0026rdquo; means that the user can run commands as all groups. The fourth \u0026ldquo;ALL\u0026rdquo; means that these rules apply to all commands. Remember to maintain the correct formatting in the file. In the case of Ubuntu, there was a tab between user and ALL (not four spaces). Personally, I am not sure if using a single space or 4 spaces will break anything, so to be sure, I kept the target formatting.\nExiting vi To exit the vi editor saving changes, press the esc key on the keyboard, then type :wq. The commands after the colon are vi commands. w means we want to save the changes made to the file, and q means to close the file.\nchmod 755 sudoers and exit We change the permissions of the sudoers file back to the default values before editing, and then exit the container shell using the exit command. After exiting, the alpine container will be removed. Only the downloaded image will remain on the disk.\ncat /etc/sudoers and sudo su To verify access, we can use the cat /etc/sudoers command to check if the entries were added correctly. We can also use the sudo su command to check if we can execute commands as sudo.\nConclusion As you can see, docker allows you to change user permissions and modify files that we do not have access to by default. The Docker group belongs to the administrative groups, so a user in this group with access to execute docker commands can modify files without needing administrator access.\n","permalink":"https://blog.budzynskimaciej.pl/en/post/docker-sudo-tricks/","summary":"\u003cp\u003eDo you not have administrator privileges on your local machine? Do you have Linux and Docker?\nIf the answer to the above questions is yes, then in this article I will show you how to use\nDocker to modify the sudoers file, allowing you to gain administrator privileges.\u003c/p\u003e","title":"How to gain admin access on Linux using Docker?"},{"content":"Projects Most of my public projects can be found on my GitHub.\nPage Under Construction ","permalink":"https://blog.budzynskimaciej.pl/en/projects/","summary":"\u003ch2 id=\"projects\"\u003eProjects\u003c/h2\u003e\n\u003cp\u003eMost of my public projects can be found on my\n\u003ca href=\"https://github.com/BudzynskiMaciej\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"page-under-constructionhttpsgithubcombudzynskimaciej\"\u003e\u003ca href=\"https://github.com/BudzynskiMaciej\"\u003ePage Under Construction\u003c/a\u003e\u003c/h3\u003e","title":"Projects"},{"content":"Blockchain is a popular word in the depths of the internet lately. In this article, I will try to demystify what the famous Blockchain is and what it can be useful for.\nData Structures First, it is necessary to explain what data structures are in order to understand what blockchain is. Data structures, in general, are ways of organizing, managing, and storing data in computer memory. More precisely, a data structure is a collection of data values, the relationships between them, and the functions or operations that can be applied to the data. Different data structures serve different purposes, such as relational databases that use B-tree indexes to retrieve data, and some compiler implementations use hash tables to look up identifiers. Data structures include:\nRecord, also known as a structure or tuple (e.g., a point with coordinates X, Y) Array List (singly or doubly linked) Object Tree Hash table Graph and many, many more variations of the above data structures.\nBlockchain Blockchain is a data structure. Specifically, it is a type of singly linked list containing blocks that are strongly linked together using cryptography. Each block contains the hash of the previous block, a timestamp, and transaction data. The exception is the so-called Genesis Block. This is the first block that forms the chain of links with other blocks. The premise of the blockchain is resistance to data modification and easy verification that the data has not been tampered with. Modifying any block results in generating completely different hashes for subsequent blocks, which allows for easy verification that the data has not been tampered with.\nWhy and for whom? Currently, the application of blockchain is primarily to handle various transactions such as:\nStocks Currencies Trade The main application of this data structure can be seen in cryptocurrencies like Bitcoin. In the next articles, I will try to implement an example blockchain.\n","permalink":"https://blog.budzynskimaciej.pl/en/post/blockchain-p1/","summary":"\u003cp\u003eBlockchain is a popular word in the depths of the internet lately. In this article, I will try to demystify what the famous Blockchain is and what it can be useful for.\u003c/p\u003e","title":"What is Blockchain?"},{"content":"I haven\u0026rsquo;t written here for a long time, but it\u0026rsquo;s worth refreshing this blog a bit. Today\u0026rsquo;s post will be short, and in it, I intend to present the integration of Hugo with the Forestry.io platform.\nWhat is Forestry.io? Simply put, Forestry.io is a visual editor for our website. Thanks to Forestry.io, it is possible to publish and edit pages using a web browser.\nIntegration The integration of Hugo with Forestry.io is simple. Just log in to https://app.forestry.io/ using our Github account and fill in the data requested by the site step by step. After integration, just log in, go to the posts tab, and add or edit them using the visual Markdown editor. And that\u0026rsquo;s basically it for today.\nThis post was added using https://app.forestry.io/\n","permalink":"https://blog.budzynskimaciej.pl/en/post/forestry-and-hugo/","summary":"\u003cp\u003eI haven\u0026rsquo;t written here for a long time, but it\u0026rsquo;s worth refreshing this blog a bit. Today\u0026rsquo;s post will be short, and in it, I intend to present the integration of Hugo with the Forestry.io platform.\u003c/p\u003e","title":"Forestry and Hugo"},{"content":"In Python, there were two methods of formatting strings. This situation lasted until the release of Python 3.6, with the advent of f-strings. Today, I will try to discuss all formatting methods and provide examples of their use.\nCode we will work with We will use a few simple variables, which I will try to display using each of the available formatting methods.\nfirst_name = \u0026#34;John\u0026#34; last_name = \u0026#34;Doe\u0026#34; born_year = 1978 current_age = 40 dict = {\u0026#39;text\u0026#39;:\u0026#39;One\u0026#39;, \u0026#39;value\u0026#39;: 1} Old formatting using the \u0026lsquo;%\u0026rsquo; sign This formatting has been in Python for a long time. Currently, this method is not recommended by Python documentation, as it has some shortcomings and can cause problems with displaying tuples and lists. Below is an example of using this formatting:\nprint(\u0026#34;Hello %s %s. Your born year is %d. You are %d years old\u0026#34;, first_name, last_name, born_year, current_age) What does %s mean? It simply informs the interpreter that we want to read a string. Available modifiers:\n%s - String (or any object that has a repr method, e.g., an array) %d - Integers %f - Floating-point numbers %.(X) - Floating-point number with precision up to X decimal places %X - Integer represented in hexadecimal (base-16) notation Formatting using str.format() This option was introduced in Python 2.6. It is improved formatting compared to %-formatting. With str.format(), the fields we want to substitute are represented by {}. Example:\nprint(\u0026#34;Hello {2} {3}. Your born year is {1}. You are {0} years old.\u0026#34;.format(current_age, born_year, first_name, last_name)) We can also display the contents of dictionaries by unpacking them:\nprint(\u0026#34;{text} is {value}.\u0026#34;.format(**dict)) The new way, f-Strings in Python 3.6 The introduction of f-Strings made formatting even simpler. Example:\nprint(f\u0026#34;Hello {first_name} {last_name}. Your born year is {born_year}. You are {current_year} years old\u0026#34;) That\u0026rsquo;s all, f-Strings are executed at runtime. Just put a previously defined variable in {}. You can also use expressions, e.g.:\nprint(f\u0026#34;{2 * 6}\u0026#34;) This code will display the value of the expression 2 * 6, which is 12. You can also call functions:\nname = \u0026#34;jane\u0026#34; print(f\u0026#34;{name.capitalize()}\u0026#34;) The above code will display the string: Jane. We can also display the contents of dictionaries:\nprint(f\u0026#34;{dict[\u0026#39;text\u0026#39;]} is {dict[\u0026#39;value\u0026#39;]}.\u0026#34;) As you can see, it is worth using f-Strings as they increase our productivity and do not obscure the code. They are also slightly faster to execute than %-Strings and str.format().\n","permalink":"https://blog.budzynskimaciej.pl/en/post/string-in-python/","summary":"\u003cp\u003eIn Python, there were two methods of formatting strings. This situation lasted until the release of\nPython 3.6, with the advent of f-strings. Today, I will try to discuss all formatting methods and provide examples of their use.\u003c/p\u003e","title":"Beautifying Strings: How to Format Strings in Python"},{"content":"Nowadays, everyone has their own website on the internet. I decided to start a blog based on Hugo technology.\nBeginnings of blogging I started my adventure with a blog created using Wordpress. The configuration possibilities, the number of templates, and add-ons were overwhelming. Wordpress was a very simple tool, but it also had some drawbacks, it required PHP and a Database, and as the site grew, its loading time increased. Additionally, free hosting could not handle high traffic on the sites.\nStatic site generators Then I got acquainted with tools for generating static sites. I started by using the most popular one, Jekyll. And here the first problems appeared. As a Windows user, I started having problems with the configuration and installation of Ruby. Problems with certificates, problems with bundler, with updating add-ons, and Jekyll itself. Although Jekyll is a powerful tool that allows you to install add-ons and freely modify the appearance of the site, Ruby + Windows = Torture.\nHugo, a static site generator based on GoLang I decided to look for an alternative to Jekyll and thus I came across Hugo, or rather goHugo (typing just the phrase Hugo may result in finding a well-known troll named Hugo from an interactive children\u0026rsquo;s TV show) Hugo is, like Jekyll, a static site generator, but written in the compiled language GoLang. We don\u0026rsquo;t need to know Go at all to use Hugo. The only knowledge we need is related to HTML and CSS if we want to edit or create our own templates, and Markdown to write our posts.\nAdvantages Disadvantages Easy post creation using Markdown Requires knowledge of GIT if we intend to use GitHub Pages Easy management of appearance thanks to HTML and CSS Adding special functions may require knowledge of Go Simple and extensive documentation On most hostings, it is required to upload the entire Public folder Starting the adventure with Hugo To start the adventure with Hugo, you need to download the latest version from the GitHub repository. From there, download the latest version depending on your operating system: In my case, at the time of writing this news, it is version hugo_0.40.1_Windows-64bit.zip On Windows, just extract the hugo.exe file anywhere: I recommend C:/Hugo/ Then we need to add the directory containing the aforementioned file to the PATH environment variable. If we did everything correctly, the command hugo help should work. In case of problems, I refer you to the official Hugo documentation related to its installation on Windows in English.\nFinally, I leave a video related to the quick installation and activation of our first blog in Hugo ","permalink":"https://blog.budzynskimaciej.pl/en/post/blog/","summary":"\u003cp\u003eNowadays, everyone has their own website on the internet. I decided to start a blog based on Hugo technology.\u003c/p\u003e","title":"Blog based on the Hugo static site generator"},{"content":"Are you wondering which programming language to choose? Have no idea which one to pick? Then this post is for you. I have prepared short descriptions of various programming languages and the basic Hello World program code.\nGolang package main import \u0026#34;fmt\u0026#34; func main(){ fmt.Printf(\u0026#34;Hello World\\n\u0026#34;) } Statically typed, multi-paradigm programming language developed by Google employees Robert Griesemer, Rob Pike, and Ken Thompson in 2009. It has a built-in Garbage Collector. Significantly simplifies concurrent programming thanks to so-called GoRoutines. Functions can return more than one result. Unfortunately, as of now, Go 1.10 does not support generic types.\nJavaScript console.log(\u0026#34;Hello World\u0026#34;); Frontend language. Required when writing web applications. Used to create interactive views on web pages. Dynamically typed (duck typing), multi-paradigm, prototype-based programming language developed by Netscape in 1995. Thanks to its server-side implementation NodeJS, it has a huge library of frameworks including Angular from Google and React from Facebook.\nJava class Hello{ public static void main(){ System.out.println(\u0026#34;Hello World\u0026#34;); } } Fully object-oriented, statically typed language. Currently one of the most popular programming languages in which you can find a job without much trouble. Created in 1995 by Sun Microsystems. Its main application is enterprise-class web applications. Often used with the Spring Framework to create applications. Java was designed with architecture independence in mind, allowing it to run on any machine with a Java Virtual Machine.\nC# class HelloWorld { static void Main() { System.Console.WriteLine(\u0026#34;Hello, World!\u0026#34;); } } Microsoft\u0026rsquo;s answer to Java. Also created as a fully object-oriented, statically typed programming language. It has many elements of C++ and Java. The .NET virtual machine allows it to run on many systems, mainly thanks to .NET Core.\nC #include \u0026lt;stdio.h\u0026gt; main() { printf(\u0026#34;Hello World!\\n\u0026#34;); } One of the oldest languages, currently used in writing microcontrollers. It is also used in the development of the Linux kernel. It does not have classes, but it is small in size and can be compiled on any platform. It is a statically typed language.\nC++ #include \u0026lt;iostream.h\u0026gt; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; } Enhanced C, has classes, templates (generic types), inheritance mechanisms. Overall, it is C on steroids. Used where the speed of our applications matters.\nPython print(\u0026#34;Hello World\u0026#34;) Dynamically typed, interpreted language. Very easy to learn, it finds use in many fields of computer science, from simple scripts, through websites (using Django or Flask frameworks), to Artificial Intelligence (Machine Learning, Deep Learning). Thanks to dynamic typing, we do not have to worry about specifying data types, but since it is an interpreted language, we cannot detect errors before running the application, and the performance of our applications will not be as good as in the case of applications written in C or C++ (although it all depends on the algorithm used).\nRuby puts \u0026#39;Hello, world!\u0026#39; Like Python, it is a dynamically typed and interpreted language. Currently, its main application is WebDev thanks to the Ruby on Rails framework, which allows for quick prototyping and writing web applications. Ruby on Rails itself has a scaffolding mechanism, allowing us to create a simple site with databases, views, and controllers in a few minutes.\nPHP \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; A language considered by many to be dying, intended exclusively for WebDev. Nevertheless, it is still very popular thanks to the CMS called WordPress, which was written in PHP. WordPress itself does not require knowledge of PHP, but writing plugins may require knowledge of PHP.\nHaskell main = putStrLn \u0026#34;Hello World\u0026#34; A language with a functional programming paradigm. Ideal for learning this style of programming. I have not had the opportunity to use it, so I will not write much about it.\nMalbolge (=\u0026lt;`$9]7\u0026lt;5YXz7wT.3,+O/o\u0026#39;K%$H\u0026#34;\u0026#39;~D|#z@b=`{^Lx8%$Xmrkpohm-kNi;gsedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?\u0026gt;=\u0026lt;;:9876543s+O\u0026lt;oLm","permalink":"https://blog.budzynskimaciej.pl/en/post/helloworld/","summary":"\u003cp\u003eAre you wondering which programming language to choose? Have no idea which one to pick?\nThen this post is for you. I have prepared short descriptions of various programming\nlanguages and the basic Hello World program code.\u003c/p\u003e","title":"Which programming language to choose as a beginner, or multi-Hello World"}]